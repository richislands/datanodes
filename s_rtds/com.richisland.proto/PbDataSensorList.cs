// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_data_sensor_list.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Richisland.Proto {

  /// <summary>Holder for reflection information generated from pb_data_sensor_list.proto</summary>
  public static partial class PbDataSensorListReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_data_sensor_list.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbDataSensorListReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlwYl9kYXRhX3NlbnNvcl9saXN0LnByb3RvEhRjb20ucmljaGlzbGFuZC5w",
            "cm90bxoUcGJfZGF0YV9zZW5zb3IucHJvdG8iZQoTcGJfZGF0YV9zZW5zb3Jf",
            "bGlzdBIPCgdsaXN0X2lkGAEgASgFEj0KD3BiX2RhdGFfc2Vuc29ycxgCIAMo",
            "CzIkLmNvbS5yaWNoaXNsYW5kLnByb3RvLnBiX2RhdGFfc2Vuc29yYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Richisland.Proto.PbDataSensorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Richisland.Proto.pb_data_sensor_list), global::Com.Richisland.Proto.pb_data_sensor_list.Parser, new[]{ "ListId", "PbDataSensors" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class pb_data_sensor_list :PbData, pb::IMessage<pb_data_sensor_list> {
    private static readonly pb::MessageParser<pb_data_sensor_list> _parser = new pb::MessageParser<pb_data_sensor_list>(() => new pb_data_sensor_list());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pb_data_sensor_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Richisland.Proto.PbDataSensorListReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_data_sensor_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_data_sensor_list(pb_data_sensor_list other) : this() {
      listId_ = other.listId_;
      pbDataSensors_ = other.pbDataSensors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_data_sensor_list Clone() {
      return new pb_data_sensor_list(this);
    }

    /// <summary>Field number for the "list_id" field.</summary>
    public const int ListIdFieldNumber = 1;
    private int listId_;
    /// <summary>
    /// list的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListId {
      get { return listId_; }
      set {
        listId_ = value;
      }
    }

    /// <summary>Field number for the "pb_data_sensors" field.</summary>
    public const int PbDataSensorsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Com.Richisland.Proto.pb_data_sensor> _repeated_pbDataSensors_codec
        = pb::FieldCodec.ForMessage(18, global::Com.Richisland.Proto.pb_data_sensor.Parser);
    private readonly pbc::RepeatedField<global::Com.Richisland.Proto.pb_data_sensor> pbDataSensors_ = new pbc::RepeatedField<global::Com.Richisland.Proto.pb_data_sensor>();
    /// <summary>
    /// 传感器数据集合
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Richisland.Proto.pb_data_sensor> PbDataSensors {
      get { return pbDataSensors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pb_data_sensor_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pb_data_sensor_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ListId != other.ListId) return false;
      if(!pbDataSensors_.Equals(other.pbDataSensors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ListId != 0) hash ^= ListId.GetHashCode();
      hash ^= pbDataSensors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ListId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ListId);
      }
      pbDataSensors_.WriteTo(output, _repeated_pbDataSensors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ListId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListId);
      }
      size += pbDataSensors_.CalculateSize(_repeated_pbDataSensors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb_data_sensor_list other) {
      if (other == null) {
        return;
      }
      if (other.ListId != 0) {
        ListId = other.ListId;
      }
      pbDataSensors_.Add(other.pbDataSensors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ListId = input.ReadInt32();
            break;
          }
          case 18: {
            pbDataSensors_.AddEntriesFrom(input, _repeated_pbDataSensors_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
