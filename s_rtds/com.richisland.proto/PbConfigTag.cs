// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_config_tag.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Richisland.Proto {

  /// <summary>Holder for reflection information generated from pb_config_tag.proto</summary>
  public static partial class PbConfigTagReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_config_tag.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbConfigTagReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwYl9jb25maWdfdGFnLnByb3RvEhRjb20ucmljaGlzbGFuZC5wcm90byLj",
            "AgoNcGJfY29uZmlnX3RhZxIOCgZ0YWdfaWQYASABKAUSEAoIdGFnX25hbWUY",
            "AiABKAkSFQoNc2F2ZV90YWdfbmFtZRgDIAEoCRIYChBwdWJsaXNoX3RhZ19u",
            "YW1lGAQgASgJEjUKCWRhdGFfdHlwZRgFIAEoDjIiLmNvbS5yaWNoaXNsYW5k",
            "LnByb3RvLnBiX2RhdGFfdHlwZRITCgtkYXRhX2Zvcm1hdBgGIAEoBRJEChRz",
            "dHJpbmdfZGF0YV9lbmNvZGluZxgHIAEoDjImLmNvbS5yaWNoaXNsYW5kLnBy",
            "b3RvLnBiX2VuY29kaW5nX3R5cGUSGwoTY29ycmVjdF9jb2VmZmljaWVudBgI",
            "IAEoAhIZChFhZGl1c3RfcGFyYW1ldGVycxgJIAEoAhI1CglkYXRhX3VuaXQY",
            "CiABKA4yIi5jb20ucmljaGlzbGFuZC5wcm90by5wYl9kYXRhX3VuaXQqXgoQ",
            "cGJfZW5jb2RpbmdfdHlwZRIICgROT05FEAASCAoEVVRGOBABEgoKBkdCMjMx",
            "MhACEgcKA0dCSxADEgsKB1VOSUNPREUQBBIJCgVBU0NJSRAFEgkKBVVURjE2",
            "EAYqoQEKDHBiX2RhdGFfdHlwZRIOCgpFTlVNX0lOVDMyEAASDgoKRU5VTV9J",
            "TlQ2NBABEg8KC0VOVU1fVUlOVDMyEAISDwoLRU5VTV9VSU5UNjQQAxIOCgpF",
            "TlVNX0ZMT0FUEAQSDwoLRU5VTV9ET1VCTEUQBRINCglFTlVNX0JPT0wQBhIP",
            "CgtFTlVNX1NUUklORxAHEg4KCkVOVU1fQllURVMQCCqzBQoMcGJfZGF0YV91",
            "bml0Eg0KCU5PTkVfVU5JVBAAEgoKBkxFTl9LTRABEgkKBUxFTl9NEAISCgoG",
            "TEVOX0RNEAMSCgoGTEVOX0NNEAQSCgoGTEVOX01NEAUSCgoGVkxNX00zEAYS",
            "CwoHVkxNX0RNMxAHEgsKB1ZMTV9DTTMQCBILCgdWTE1fTU0zEAkSCwoHV0VU",
            "X1RPThAKEgoKBldFVF9LRxALEgkKBVdFVF9HEAwSCwoHUFJFX01QQRANEgsK",
            "B1BSRV9LUEEQDhILCgdQUkVfSFBBEA8SCgoGUFJFX1BBEBASDAoIUFJFX01C",
            "QVIQERILCgdQUkVfQVRNEBISDAoIUFJFX1RPUlIQExILCgdQUkVfQkFSEBQS",
            "CwoHUFJFX1BTSRAVEgwKCFBSRV9NTUhHEBYSDQoJUFJFX01NSDIwEBcSDAoI",
            "UFJFX0lOSEcQGBINCglQUkVfSU5IMjAQGRIOCgpQUkVfTEJfRlQyEBoSDgoK",
            "UFJFX0tHX0NNMhAbEgkKBVRNUF9DEBwSCQoFVE1QX0YQHRIJCgVUTVBfSxAe",
            "EgkKBVRNUF9SEB8SDAoIV1JUX0tHX0gQIBIMCghXUlRfS0dfUxAhEgsKB1dS",
            "VF9UX0gQIhILCgdXUlRfVF9EECMSCwoHV1JUX1RfQRAkEgwKCFdSVF9MQl9T",
            "ECUSDAoIV1JUX0xCX0gQJhIMCghXUlRfTEJfRBAnEg0KCVZSVF9MX01JThAo",
            "EgsKB1ZSVF9MX1MQKRINCglWUlRfQkJMX0QQKhIMCghWUlRfTTNfSBArEg4K",
            "ClZSVF9NM19NSU4QLBIMCghWUlRfTTNfUxAtEg8KC1ZSVF9GVDNfTUlOEC4S",
            "DQoJVlJUX0ZUM19TEC8SEAoMVlJUX1VHQUxfTUlOEDASEAoMVlJUX0VHQUxf",
            "TUlOEDFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.Richisland.Proto.pb_encoding_type), typeof(global::Com.Richisland.Proto.pb_data_type), typeof(global::Com.Richisland.Proto.pb_data_unit), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Richisland.Proto.pb_config_tag), global::Com.Richisland.Proto.pb_config_tag.Parser, new[]{ "TagId", "TagName", "SaveTagName", "PublishTagName", "DataType", "DataFormat", "StringDataEncoding", "CorrectCoefficient", "AdiustParameters", "DataUnit" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum pb_encoding_type {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("UTF8")] Utf8 = 1,
    [pbr::OriginalName("GB2312")] Gb2312 = 2,
    [pbr::OriginalName("GBK")] Gbk = 3,
    [pbr::OriginalName("UNICODE")] Unicode = 4,
    [pbr::OriginalName("ASCII")] Ascii = 5,
    [pbr::OriginalName("UTF16")] Utf16 = 6,
  }

  public enum pb_data_type {
    [pbr::OriginalName("ENUM_INT32")] EnumInt32 = 0,
    [pbr::OriginalName("ENUM_INT64")] EnumInt64 = 1,
    [pbr::OriginalName("ENUM_UINT32")] EnumUint32 = 2,
    [pbr::OriginalName("ENUM_UINT64")] EnumUint64 = 3,
    [pbr::OriginalName("ENUM_FLOAT")] EnumFloat = 4,
    [pbr::OriginalName("ENUM_DOUBLE")] EnumDouble = 5,
    [pbr::OriginalName("ENUM_BOOL")] EnumBool = 6,
    [pbr::OriginalName("ENUM_STRING")] EnumString = 7,
    [pbr::OriginalName("ENUM_BYTES")] EnumBytes = 8,
  }

  public enum pb_data_unit {
    /// <summary>
    ///无
    /// </summary>
    [pbr::OriginalName("NONE_UNIT")] NoneUnit = 0,
    /// <summary>
    ///千米
    /// </summary>
    [pbr::OriginalName("LEN_KM")] LenKm = 1,
    /// <summary>
    ///米
    /// </summary>
    [pbr::OriginalName("LEN_M")] LenM = 2,
    /// <summary>
    ///分米
    /// </summary>
    [pbr::OriginalName("LEN_DM")] LenDm = 3,
    /// <summary>
    ///厘米
    /// </summary>
    [pbr::OriginalName("LEN_CM")] LenCm = 4,
    /// <summary>
    ///毫米
    /// </summary>
    [pbr::OriginalName("LEN_MM")] LenMm = 5,
    /// <summary>
    ///立方米
    /// </summary>
    [pbr::OriginalName("VLM_M3")] VlmM3 = 6,
    /// <summary>
    ///立方分米
    /// </summary>
    [pbr::OriginalName("VLM_DM3")] VlmDm3 = 7,
    /// <summary>
    ///立方厘米
    /// </summary>
    [pbr::OriginalName("VLM_CM3")] VlmCm3 = 8,
    /// <summary>
    ///立方毫米
    /// </summary>
    [pbr::OriginalName("VLM_MM3")] VlmMm3 = 9,
    /// <summary>
    ///吨
    /// </summary>
    [pbr::OriginalName("WET_TON")] WetTon = 10,
    /// <summary>
    ///千克
    /// </summary>
    [pbr::OriginalName("WET_KG")] WetKg = 11,
    /// <summary>
    ///克
    /// </summary>
    [pbr::OriginalName("WET_G")] WetG = 12,
    /// <summary>
    ///兆帕
    /// </summary>
    [pbr::OriginalName("PRE_MPA")] PreMpa = 13,
    /// <summary>
    ///千帕
    /// </summary>
    [pbr::OriginalName("PRE_KPA")] PreKpa = 14,
    /// <summary>
    ///百帕
    /// </summary>
    [pbr::OriginalName("PRE_HPA")] PreHpa = 15,
    /// <summary>
    ///帕
    /// </summary>
    [pbr::OriginalName("PRE_PA")] PrePa = 16,
    /// <summary>
    ///毫帕
    /// </summary>
    [pbr::OriginalName("PRE_MBAR")] PreMbar = 17,
    /// <summary>
    ///标准大气压
    /// </summary>
    [pbr::OriginalName("PRE_ATM")] PreAtm = 18,
    /// <summary>
    ///托
    /// </summary>
    [pbr::OriginalName("PRE_TORR")] PreTorr = 19,
    /// <summary>
    ///巴
    /// </summary>
    [pbr::OriginalName("PRE_BAR")] PreBar = 20,
    /// <summary>
    ///磅
    /// </summary>
    [pbr::OriginalName("PRE_PSI")] PrePsi = 21,
    /// <summary>
    ///毫米汞柱
    /// </summary>
    [pbr::OriginalName("PRE_MMHG")] PreMmhg = 22,
    /// <summary>
    ///毫米水柱
    /// </summary>
    [pbr::OriginalName("PRE_MMH20")] PreMmh20 = 23,
    /// <summary>
    ///英寸汞柱
    /// </summary>
    [pbr::OriginalName("PRE_INHG")] PreInhg = 24,
    /// <summary>
    ///英寸水柱
    /// </summary>
    [pbr::OriginalName("PRE_INH20")] PreInh20 = 25,
    /// <summary>
    ///磅每平方英尺
    /// </summary>
    [pbr::OriginalName("PRE_LB_FT2")] PreLbFt2 = 26,
    /// <summary>
    ///千克每平方厘米
    /// </summary>
    [pbr::OriginalName("PRE_KG_CM2")] PreKgCm2 = 27,
    /// <summary>
    ///摄氏度
    /// </summary>
    [pbr::OriginalName("TMP_C")] TmpC = 28,
    /// <summary>
    ///华氏度
    /// </summary>
    [pbr::OriginalName("TMP_F")] TmpF = 29,
    /// <summary>
    ///开氏度
    /// </summary>
    [pbr::OriginalName("TMP_K")] TmpK = 30,
    /// <summary>
    ///蘭氏度
    /// </summary>
    [pbr::OriginalName("TMP_R")] TmpR = 31,
    /// <summary>
    ///千克每時
    /// </summary>
    [pbr::OriginalName("WRT_KG_H")] WrtKgH = 32,
    /// <summary>
    ///千克每秒
    /// </summary>
    [pbr::OriginalName("WRT_KG_S")] WrtKgS = 33,
    /// <summary>
    ///吨每時
    /// </summary>
    [pbr::OriginalName("WRT_T_H")] WrtTH = 34,
    /// <summary>
    ///吨每日
    /// </summary>
    [pbr::OriginalName("WRT_T_D")] WrtTD = 35,
    /// <summary>
    ///吨每年
    /// </summary>
    [pbr::OriginalName("WRT_T_A")] WrtTA = 36,
    /// <summary>
    ///磅每秒
    /// </summary>
    [pbr::OriginalName("WRT_LB_S")] WrtLbS = 37,
    /// <summary>
    ///磅每時
    /// </summary>
    [pbr::OriginalName("WRT_LB_H")] WrtLbH = 38,
    /// <summary>
    ///磅每日
    /// </summary>
    [pbr::OriginalName("WRT_LB_D")] WrtLbD = 39,
    /// <summary>
    ///升每分
    /// </summary>
    [pbr::OriginalName("VRT_L_MIN")] VrtLMin = 40,
    /// <summary>
    ///升每秒
    /// </summary>
    [pbr::OriginalName("VRT_L_S")] VrtLS = 41,
    /// <summary>
    ///桶每日
    /// </summary>
    [pbr::OriginalName("VRT_BBL_D")] VrtBblD = 42,
    /// <summary>
    ///立方米每是
    /// </summary>
    [pbr::OriginalName("VRT_M3_H")] VrtM3H = 43,
    /// <summary>
    ///立方米每分
    /// </summary>
    [pbr::OriginalName("VRT_M3_MIN")] VrtM3Min = 44,
    /// <summary>
    ///立方米每秒
    /// </summary>
    [pbr::OriginalName("VRT_M3_S")] VrtM3S = 45,
    /// <summary>
    ///立方英尺每分
    /// </summary>
    [pbr::OriginalName("VRT_FT3_MIN")] VrtFt3Min = 46,
    /// <summary>
    ///立方英尺每秒
    /// </summary>
    [pbr::OriginalName("VRT_FT3_S")] VrtFt3S = 47,
    /// <summary>
    ///加仑(美)每分 
    /// </summary>
    [pbr::OriginalName("VRT_UGAL_MIN")] VrtUgalMin = 48,
    /// <summary>
    ///加仑(英)每分   
    /// </summary>
    [pbr::OriginalName("VRT_EGAL_MIN")] VrtEgalMin = 49,
  }

  #endregion

  #region Messages
  public sealed partial class pb_config_tag : pb::IMessage<pb_config_tag> {
    private static readonly pb::MessageParser<pb_config_tag> _parser = new pb::MessageParser<pb_config_tag>(() => new pb_config_tag());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pb_config_tag> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Richisland.Proto.PbConfigTagReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_config_tag() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_config_tag(pb_config_tag other) : this() {
      tagId_ = other.tagId_;
      tagName_ = other.tagName_;
      saveTagName_ = other.saveTagName_;
      publishTagName_ = other.publishTagName_;
      dataType_ = other.dataType_;
      dataFormat_ = other.dataFormat_;
      stringDataEncoding_ = other.stringDataEncoding_;
      correctCoefficient_ = other.correctCoefficient_;
      adiustParameters_ = other.adiustParameters_;
      dataUnit_ = other.dataUnit_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_config_tag Clone() {
      return new pb_config_tag(this);
    }

    /// <summary>Field number for the "tag_id" field.</summary>
    public const int TagIdFieldNumber = 1;
    private int tagId_;
    /// <summary>
    /// 标签点ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TagId {
      get { return tagId_; }
      set {
        tagId_ = value;
      }
    }

    /// <summary>Field number for the "tag_name" field.</summary>
    public const int TagNameFieldNumber = 2;
    private string tagName_ = "";
    /// <summary>
    /// 采集标签点名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TagName {
      get { return tagName_; }
      set {
        tagName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "save_tag_name" field.</summary>
    public const int SaveTagNameFieldNumber = 3;
    private string saveTagName_ = "";
    /// <summary>
    /// 存储标签点名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SaveTagName {
      get { return saveTagName_; }
      set {
        saveTagName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "publish_tag_name" field.</summary>
    public const int PublishTagNameFieldNumber = 4;
    private string publishTagName_ = "";
    /// <summary>
    /// 发布标签点名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublishTagName {
      get { return publishTagName_; }
      set {
        publishTagName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 5;
    private global::Com.Richisland.Proto.pb_data_type dataType_ = 0;
    /// <summary>
    /// 数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Richisland.Proto.pb_data_type DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "data_format" field.</summary>
    public const int DataFormatFieldNumber = 6;
    private int dataFormat_;
    /// <summary>
    /// 数据格式
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataFormat {
      get { return dataFormat_; }
      set {
        dataFormat_ = value;
      }
    }

    /// <summary>Field number for the "string_data_encoding" field.</summary>
    public const int StringDataEncodingFieldNumber = 7;
    private global::Com.Richisland.Proto.pb_encoding_type stringDataEncoding_ = 0;
    /// <summary>
    /// 字符编码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Richisland.Proto.pb_encoding_type StringDataEncoding {
      get { return stringDataEncoding_; }
      set {
        stringDataEncoding_ = value;
      }
    }

    /// <summary>Field number for the "correct_coefficient" field.</summary>
    public const int CorrectCoefficientFieldNumber = 8;
    private float correctCoefficient_;
    /// <summary>
    /// 修正系数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CorrectCoefficient {
      get { return correctCoefficient_; }
      set {
        correctCoefficient_ = value;
      }
    }

    /// <summary>Field number for the "adiust_parameters" field.</summary>
    public const int AdiustParametersFieldNumber = 9;
    private float adiustParameters_;
    /// <summary>
    /// 调整参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AdiustParameters {
      get { return adiustParameters_; }
      set {
        adiustParameters_ = value;
      }
    }

    /// <summary>Field number for the "data_unit" field.</summary>
    public const int DataUnitFieldNumber = 10;
    private global::Com.Richisland.Proto.pb_data_unit dataUnit_ = 0;
    /// <summary>
    /// 单位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Richisland.Proto.pb_data_unit DataUnit {
      get { return dataUnit_; }
      set {
        dataUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pb_config_tag);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pb_config_tag other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TagId != other.TagId) return false;
      if (TagName != other.TagName) return false;
      if (SaveTagName != other.SaveTagName) return false;
      if (PublishTagName != other.PublishTagName) return false;
      if (DataType != other.DataType) return false;
      if (DataFormat != other.DataFormat) return false;
      if (StringDataEncoding != other.StringDataEncoding) return false;
      if (CorrectCoefficient != other.CorrectCoefficient) return false;
      if (AdiustParameters != other.AdiustParameters) return false;
      if (DataUnit != other.DataUnit) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TagId != 0) hash ^= TagId.GetHashCode();
      if (TagName.Length != 0) hash ^= TagName.GetHashCode();
      if (SaveTagName.Length != 0) hash ^= SaveTagName.GetHashCode();
      if (PublishTagName.Length != 0) hash ^= PublishTagName.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (DataFormat != 0) hash ^= DataFormat.GetHashCode();
      if (StringDataEncoding != 0) hash ^= StringDataEncoding.GetHashCode();
      if (CorrectCoefficient != 0F) hash ^= CorrectCoefficient.GetHashCode();
      if (AdiustParameters != 0F) hash ^= AdiustParameters.GetHashCode();
      if (DataUnit != 0) hash ^= DataUnit.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TagId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TagId);
      }
      if (TagName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TagName);
      }
      if (SaveTagName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SaveTagName);
      }
      if (PublishTagName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PublishTagName);
      }
      if (DataType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) DataType);
      }
      if (DataFormat != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DataFormat);
      }
      if (StringDataEncoding != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) StringDataEncoding);
      }
      if (CorrectCoefficient != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(CorrectCoefficient);
      }
      if (AdiustParameters != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AdiustParameters);
      }
      if (DataUnit != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) DataUnit);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TagId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TagId);
      }
      if (TagName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TagName);
      }
      if (SaveTagName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SaveTagName);
      }
      if (PublishTagName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublishTagName);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (DataFormat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataFormat);
      }
      if (StringDataEncoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StringDataEncoding);
      }
      if (CorrectCoefficient != 0F) {
        size += 1 + 4;
      }
      if (AdiustParameters != 0F) {
        size += 1 + 4;
      }
      if (DataUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataUnit);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb_config_tag other) {
      if (other == null) {
        return;
      }
      if (other.TagId != 0) {
        TagId = other.TagId;
      }
      if (other.TagName.Length != 0) {
        TagName = other.TagName;
      }
      if (other.SaveTagName.Length != 0) {
        SaveTagName = other.SaveTagName;
      }
      if (other.PublishTagName.Length != 0) {
        PublishTagName = other.PublishTagName;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.DataFormat != 0) {
        DataFormat = other.DataFormat;
      }
      if (other.StringDataEncoding != 0) {
        StringDataEncoding = other.StringDataEncoding;
      }
      if (other.CorrectCoefficient != 0F) {
        CorrectCoefficient = other.CorrectCoefficient;
      }
      if (other.AdiustParameters != 0F) {
        AdiustParameters = other.AdiustParameters;
      }
      if (other.DataUnit != 0) {
        DataUnit = other.DataUnit;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TagId = input.ReadInt32();
            break;
          }
          case 18: {
            TagName = input.ReadString();
            break;
          }
          case 26: {
            SaveTagName = input.ReadString();
            break;
          }
          case 34: {
            PublishTagName = input.ReadString();
            break;
          }
          case 40: {
            dataType_ = (global::Com.Richisland.Proto.pb_data_type) input.ReadEnum();
            break;
          }
          case 48: {
            DataFormat = input.ReadInt32();
            break;
          }
          case 56: {
            stringDataEncoding_ = (global::Com.Richisland.Proto.pb_encoding_type) input.ReadEnum();
            break;
          }
          case 69: {
            CorrectCoefficient = input.ReadFloat();
            break;
          }
          case 77: {
            AdiustParameters = input.ReadFloat();
            break;
          }
          case 80: {
            dataUnit_ = (global::Com.Richisland.Proto.pb_data_unit) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
