// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_config_rtds.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Richisland.Proto {

  /// <summary>Holder for reflection information generated from pb_config_rtds.proto</summary>
  public static partial class PbConfigRtdsReflection {

    #region Descriptor
    /// <summary>File descriptor for pb_config_rtds.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PbConfigRtdsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRwYl9jb25maWdfcnRkcy5wcm90bxIUY29tLnJpY2hpc2xhbmQucHJvdG8a",
            "FHBiX2RhdGFfc2Vuc29yLnByb3RvInEKDnBiX2NvbmZpZ19ydGRzEg8KB3J0",
            "ZHNfaWQYASABKAUSFAoMdXBkYXRlX2N5Y2xlGAIgASgFEjgKCnRhZ19pbmZv",
            "cnMYAyADKAsyJC5jb20ucmljaGlzbGFuZC5wcm90by5wYl9kYXRhX3NlbnNv",
            "cmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Richisland.Proto.PbDataSensorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Richisland.Proto.pb_config_rtds), global::Com.Richisland.Proto.pb_config_rtds.Parser, new[]{ "RtdsId", "UpdateCycle", "TagInfors" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class pb_config_rtds : PbConfig, pb::IMessage<pb_config_rtds> {
    private static readonly pb::MessageParser<pb_config_rtds> _parser = new pb::MessageParser<pb_config_rtds>(() => new pb_config_rtds());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<pb_config_rtds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Richisland.Proto.PbConfigRtdsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_config_rtds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_config_rtds(pb_config_rtds other) : this() {
      rtdsId_ = other.rtdsId_;
      updateCycle_ = other.updateCycle_;
      tagInfors_ = other.tagInfors_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb_config_rtds Clone() {
      return new pb_config_rtds(this);
    }

    /// <summary>Field number for the "rtds_id" field.</summary>
    public const int RtdsIdFieldNumber = 1;
    private int rtdsId_;
    /// <summary>
    /// 实时数据服务配置信息ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RtdsId {
      get { return rtdsId_; }
      set {
        rtdsId_ = value;
      }
    }

    /// <summary>Field number for the "update_cycle" field.</summary>
    public const int UpdateCycleFieldNumber = 2;
    private int updateCycle_;
    /// <summary>
    /// 数据更新周期：单位为秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpdateCycle {
      get { return updateCycle_; }
      set {
        updateCycle_ = value;
      }
    }

    /// <summary>Field number for the "tag_infors" field.</summary>
    public const int TagInforsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Com.Richisland.Proto.pb_data_sensor> _repeated_tagInfors_codec
        = pb::FieldCodec.ForMessage(26, global::Com.Richisland.Proto.pb_data_sensor.Parser);
    private readonly pbc::RepeatedField<global::Com.Richisland.Proto.pb_data_sensor> tagInfors_ = new pbc::RepeatedField<global::Com.Richisland.Proto.pb_data_sensor>();
    /// <summary>
    /// 标签点信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.Richisland.Proto.pb_data_sensor> TagInfors {
      get { return tagInfors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as pb_config_rtds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(pb_config_rtds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RtdsId != other.RtdsId) return false;
      if (UpdateCycle != other.UpdateCycle) return false;
      if(!tagInfors_.Equals(other.tagInfors_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RtdsId != 0) hash ^= RtdsId.GetHashCode();
      if (UpdateCycle != 0) hash ^= UpdateCycle.GetHashCode();
      hash ^= tagInfors_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RtdsId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RtdsId);
      }
      if (UpdateCycle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UpdateCycle);
      }
      tagInfors_.WriteTo(output, _repeated_tagInfors_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RtdsId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RtdsId);
      }
      if (UpdateCycle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpdateCycle);
      }
      size += tagInfors_.CalculateSize(_repeated_tagInfors_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb_config_rtds other) {
      if (other == null) {
        return;
      }
      if (other.RtdsId != 0) {
        RtdsId = other.RtdsId;
      }
      if (other.UpdateCycle != 0) {
        UpdateCycle = other.UpdateCycle;
      }
      tagInfors_.Add(other.tagInfors_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RtdsId = input.ReadInt32();
            break;
          }
          case 16: {
            UpdateCycle = input.ReadInt32();
            break;
          }
          case 26: {
            tagInfors_.AddEntriesFrom(input, _repeated_tagInfors_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
