<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>
  <!--日志记录组建配置-->
  <log4net>
    <!-- Console部分log输出格式的设定 -->
    <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger %ndc - %message%newline" />
      </layout>
    </appender>
    <!-- ColoredConsoleAppender部分log输出格式的设定 -->
    <appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
      <mapping>
        <level value="INFO" />
        <foreColor value="White, HighIntensity" />
      </mapping>
      <mapping>
        <level value="DEBUG" />
        <foreColor value="Blue, HighIntensity" />
      </mapping>
      <mapping>
        <level value="WARN" />
        <foreColor value="Yellow, HighIntensity" />
      </mapping>
      <mapping>
        <level value="ERROR" />
        <foreColor value="Purple, HighIntensity" />
      </mapping>
      <mapping>
        <level value="FATAL" />
        <foreColor value="Red, HighIntensity" />
      </mapping>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="[%thread] %-5level - %message%newline" />
      </layout>
    </appender>
    <!-- 日志文件部分log输出格式的设定 -->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!-- 日志文件输出目录
        “Log\\LogError\\”代表写入到“程序输入目录（Debug目录）\Log\LogError\”文件夹中
      -->
      <file value="D:\richisland\log\s_rtds.log" />
      <!-- 是否覆写到文件中-->
      <appendToFile value="true" />
      <rollingStyle value="Size" />
      <!--日期格式 
        当我们设置了RollingStyle 为Date方式后，Log4Net会自动使用DatePattern 中的日期格式来创建新的日志文件
      
      <datePattern value="yyyyMMdd'.txt'" />-->
      <!--最大备份数, 设置无限备份=-1 -->
      <maxSizeRollBackups value="10" />
      <!-- 单个日志文件最大的大小
        可以使用"KB", "MB" 或 "GB"为 MaxFileSize 作为后缀限定大小。默认的文件大小是10MB
        当日志文件达到MaxFileSize大小，就自动创建备份文件。
        备份文件的多少由MaxSizeRollBackups决定。比如说，我们是以日期格式作为日志文件名的，
        假设今天是2014-12-8，那么今天创建的日志文件名就是20141108.txt,当这个文件中要超过MaxFileSize的时候，
        Log4Net就自动将老的20141208.txt改名为20141208.txt.1，并创建一个新的20141208.txt文件
      -->
      <maximumFileSize value="10MB" />
      <!--名称是否可以更改为, false为可以更改
        是否采用静态文件名：
        如果采用以日期作为文件名，每天的日志文件的名字都是动态的，所以上例中为false。
        如果采用静态文件名，那么日志文件的名字就是唯一确定的。
      -->
      <staticLogFileName value="true" />
      <!--布局-->
      <layout type="log4net.Layout.PatternLayout">
        <!--输出格式 
                     每种转换符号都以%开始，后面跟着一个格式符号和换符号。 
                     
                     %-数字　：       该项的最小长度，小于最小长度的用空格填充 
                     %m(message):     输出的日志消息 
                     %n(new line):    换行  
                     %d(datetime):    输出当前语句运行的时刻  
                     %r(run time):    输出程序从运行到执行到当前语句时消耗的毫秒数  
                     %t(thread id):   当前语句所在的线程ID  
                     %p(priority):    日志的当前优先级别，即DEBUG、INFO、WARN…等  
                     %c(class):       当前日志对象的名称， 
                     %L(line )：      输出语句所在的行号  
                     %F(file name)：  输出语句所在的文件名 
                     %logger　        日志名称 
                 -->
        <ConversionPattern value="%n日志时间：%d [%t] %n日志级别：%-5p %n日志内容：%m %n异常信息：%exception% %n"  />
      </layout>
    </appender>

    <!-- 详细的日志log输出格式的设定 -->
    <appender name="DetailedLogFileAppender" type="log4net.Appender.RollingFileAppender,log4net">
      <file                     value="Logs\DetailedLog_"/>
      <appendToFile             value="true" />
      <rollingStyle             value="Date" />
      <datePattern              value="yyyyMMdd'.txt'" />
      <maxSizeRollBackups       value="-1" />
      <maximumFileSize          value="10MB" />
      <staticLogFileName        value="false" />
      <layout type="log4net.Layout.PatternLayout">
        <ConversionPattern      value="%n日志时间：%d %n线 程 ID：[%t] %n日志级别：%-5p %n相 关 类：%c %n记录位置：%location %n日志内容：%m %n异常信息：%exception% %n"  />
      </layout>
    </appender>

    <!--SQLite-->
    <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
      <!--BufferSize为缓冲区大小-->
      <bufferSize value="1" />
      <!--引用-->
      <connectionType value="System.Data.SQLite.SQLiteConnection, System.Data.SQLite, Version=1.0.94.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139" />
      <!--连接字符串-->
      <connectionString value="Data Source=log\log4net.db3;Version=3;" />
      <!--插入语句-->
      <commandText value="INSERT INTO Log (Date, Level, Logger, Location, Message, Exception) VALUES (@Date, @Level, @Logger, @Location, @Message, @Exception)" />
      <!--记录时间-->
      <parameter>
        <parameterName value="@Date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />
      </parameter>
      <!--日志等级-->
      <parameter>
        <parameterName value="@Level" />
        <dbType value="String" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />
        </layout>
      </parameter>
      <!--记录类-->
      <parameter>
        <parameterName value="@Logger" />
        <dbType value="String" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />
        </layout>
      </parameter>
      <!--异常位置-->
      <parameter>
        <parameterName value="@Location" />
        <dbType value="String" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%location" />
        </layout>
      </parameter>
      <!--异常消息-->
      <parameter>
        <parameterName value="@Message" />
        <dbType value="String" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message" />
        </layout>
      </parameter>
      <!--错误-->
      <parameter>
        <parameterName value="@Exception" />
        <dbType value="String" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%exception" />
        </layout>
      </parameter>
    </appender>
    <!--所有logger的基础，root的设置在所有logger中都起作用。  
        当在root和logger中重复设定相同的appender时，你会发现同一日志信息将被记录两次。-->
    <root>
      <!-- OFF、Fatal、ERROR、WARN、DEBUG、INFO、ALL-->
      <level value="DEBUG" />
      <appender-ref ref="ColoredConsoleAppender" />
      <appender-ref ref="RollingLogFileAppender" />
    </root>
  </log4net>
</configuration>